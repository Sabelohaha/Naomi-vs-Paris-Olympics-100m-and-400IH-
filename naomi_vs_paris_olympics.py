# -*- coding: utf-8 -*-
"""Naomi vs Paris Olympics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-v0M0Eo76l3HlBbsMCs1vAgDtDnGjMr4
"""

#Daniel Del Toro Devia 7/11/24
#Project Name: Naomi vs Paris Olympics (100m and 400IH)
#importing libraries
import pandas as pd
import numpy as np
import plotly.express as px
import io
import math

#importing and reading data files
from google.colab import files

uploaded = files.upload()

times = pd.read_csv(io.BytesIO(uploaded['track OL vs WCh (3).csv']), encoding='latin-1')

#general cleanup of data, removing all data that doesn't pertain to Naomi or desired results in general (2021 was chosen as it is the most recent dataset)
times_clean = times[(times['Year']>=2021) & (times['Sex'] =='F') & (times['Time']!='DQ')]
FinalTimes = times_clean.drop(['Sex','Nation','Wind m/s','Lane','Where','Year'], axis =1)

#making sure that the names of the athletes are in a standard form for future data concatenation and that the times are in numerical format for plotting
#naming convention for events is r for running event, h for hurdle event and the number next to it is the distance.
FinalTimes['Rank'] = pd.to_numeric(FinalTimes['Rank'])

r100= FinalTimes[(FinalTimes['Distance']==100) & (FinalTimes['Event']=='Run') & (FinalTimes['Rank']<=3)]
r100['Athlete'] = r100['Athlete'].str.strip().str.title().str.replace('-', ' ').str.replace(',', '')
r100['Time'] = pd.to_numeric(FinalTimes['Time'], errors='coerce')
h400= FinalTimes[(FinalTimes['Distance']==400) & (FinalTimes['Event']=='Hurdles')& (FinalTimes['Rank']<=3)]
h400['Athlete'] = h400['Athlete'].str.strip().str.title().str.replace('-', ' ').str.replace(',', '')
h400['Time'] = pd.to_numeric(FinalTimes['Time'], errors='coerce')

#second dataset import and reading
from google.colab import files

uploaded = files.upload()

data = pd.read_csv(io.BytesIO(uploaded['Olympics2020 (4).csv']), encoding='latin-1')

#General cleanup of data, removing all N/A data such as teams and medals (weird spacing when calling columns is due to the way the dataset was made)
data_clean = data.drop([' Team', ' NOC', ' Games', ' Year', ' Season', ' City', ' Medal'],axis=1)
data_final = data_clean[(data_clean[' Sex']==' F') & (data_clean[' Sport']==' Athletics')]
data_final.rename(columns={' Name':'Athlete'}, inplace=True)

#Making sure that the names are in a proper format for concatenations later
#the d in front of the number means "data" as this is more generalized data about the athlete as opposed to just results
d100 = data_final[data_final[' Event']==' 100 metres Women']
d100['Athlete'] = d100['Athlete'].str.strip().str.title().str.replace('-', ' ').str.replace(',', '')

dh400 = data_final[data_final[' Event']==' 400 metres Hurdles Women']
dh400['Athlete'] = dh400['Athlete'].str.strip().str.title().str.replace('-', ' ').str.replace(',', '')


d100f = d100[(d100['ID']<=3)]
dh400f = dh400[(dh400['ID']<=3)]

#merging the two datasets based on the names of athletes and keeping the other data present (Plus a demonstration)
#td stands for totaldata
td100 = pd.merge(r100, d100f, on='Athlete', how = 'outer')
tdh400 = pd.merge(h400, dh400f, on='Athlete', how='outer')
tdh400

#from this point it is a series of looking at the data and inputting it into charts to visualize the data.
#for height in inches, the data gives the height in CM, so I convert it to inches using a division process. I do this so the graph does not look skewed (comment out the /2.54, fix the comma and change the maximum range value to understand what I mean)
sydney_data = pd.Series({

    'Height (Inches)':175/2.54,
    'Age': 21,
    'Weight (Kilograms)': 60,

}, name='Sydney McLaughlin')
fig = px.line_polar(r=sydney_data, theta=sydney_data.index, line_close=True, range_r=[0, 80])
fig.update_traces(fill='toself',line=dict(color='red'),
                  marker=dict(color='red', size=10),
                  fillcolor='rgba(130, 255, 255, 0.3)')
fig.show()

dalilah_data = pd.Series({
    'Height (Inches)': 173/2.54,
    'Age': 31,
    'Weight (Kilograms)': 55,

}, name='Dalilah Muhammed')
fig = px.line_polar(r=dalilah_data, theta=dalilah_data.index, line_close=True, range_r=[0, 80])
fig.update_traces(fill='toself')
fig.show()

femke_data = pd.Series({
    'Height (Inches)':(184/2.54),
    'Age': 21,
    'Weight (Kilograms)': 65,
}, name='Femke Bol')
fig = px.line_polar(r=femke_data, theta=femke_data.index, line_close=True, range_r=[0, 80])
fig.update_traces(fill='toself',line=dict(color='yellow'),
                  marker=dict(color='yellow', size=10),
                  fillcolor='rgba(255, 130, 255, 0.3)')
fig.show()

elaine_data = pd.Series({
    'Height (Inches)':(167/2.54),
    'Age': 29,
    'Weight (Kilograms)': 57,
}, name='Elaine Thompson Herah')
fig = px.line_polar(r=elaine_data, theta=elaine_data.index, line_close=True, range_r=[0, 70])
fig.update_traces(fill='toself',line=dict(color='red'),
                  marker=dict(color='red', size=10),
                  fillcolor='rgba(255, 255, 0, 0.3)')
fig.show()

shelly_data = pd.Series({
    'Height (Inches)':(160/2.54),
    'Age': 34,
    'Weight (Kilograms)': 57,
}, name='Shelly Ann Fraser Pryce')
fig = px.line_polar(r=shelly_data, theta=shelly_data.index, line_close=True, range_r=[0, 70])
fig.update_traces(fill='toself',line=dict(color='yellow'),
                  marker=dict(color='yellow', size=10),
                  fillcolor='rgba(0, 255, 255, 0.3)')
fig.show()

Shericka_data = pd.Series({
    'Height (Inches)':(173/2.54),
    'Age': 27,
    'Weight (Kilograms)': 61,

}, name='Shericka Jackson')
fig = px.line_polar(r=Shericka_data, theta=Shericka_data.index, line_close=True, range_r=[0, 70])
fig.update_traces(fill='toself',line=dict(color='blue'),
                  marker=dict(color='blue', size=10),
                  fillcolor='rgba(255, 130, 130, 0.3)')
fig.show()

#The colors are to symbolize the medals while comparing each athlete's time
#I choose a bar graph as its easy to see who is the fastest of each
colors = ['#FFD700', '#C0C0C0', '#CD7F32']
tt100.plot.bar(x='Athlete', y='Time', rot=-45, color = colors)

colors = ['#FFD700', '#C0C0C0', '#CD7F32']
tth400.plot.bar(x='Athlete', y='Time', rot=-45, color = colors)